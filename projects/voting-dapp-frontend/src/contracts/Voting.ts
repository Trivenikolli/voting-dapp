/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Voting","structs":{},"methods":[{"name":"create_vote","args":[{"type":"string","name":"title"},{"type":"string","name":"description"},{"type":"uint64","name":"noOfOptions"},{"type":"string","name":"option1"},{"type":"string","name":"option2"},{"type":"string","name":"option3"},{"type":"string","name":"option4"},{"type":"uint64","name":"endsAt"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote","args":[{"type":"uint64","name":"option"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":8,"bytes":6},"local":{"ints":1,"bytes":0}},"keys":{"global":{"title":{"keyType":"AVMString","valueType":"AVMString","key":"dGl0bGU="},"description":{"keyType":"AVMString","valueType":"AVMString","key":"ZGVzY3JpcHRpb24="},"noOfOptions":{"keyType":"AVMString","valueType":"AVMUint64","key":"bm9PZk9wdGlvbnM="},"option1":{"keyType":"AVMString","valueType":"AVMString","key":"b3B0aW9uMQ=="},"option2":{"keyType":"AVMString","valueType":"AVMString","key":"b3B0aW9uMg=="},"option3":{"keyType":"AVMString","valueType":"AVMString","key":"b3B0aW9uMw=="},"option4":{"keyType":"AVMString","valueType":"AVMString","key":"b3B0aW9uNA=="},"option1Votes":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3B0aW9uMVZvdGVz"},"option2Votes":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3B0aW9uMlZvdGVz"},"option3Votes":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3B0aW9uM1ZvdGVz"},"option4Votes":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3B0aW9uNFZvdGVz"},"startsAt":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3RhcnRzQXQ="},"endsAt":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW5kc0F0"},"vote_status":{"keyType":"AVMString","valueType":"AVMUint64","key":"dm90ZV9zdGF0dXM="}},"local":{"localState":{"keyType":"AVMString","valueType":"AVMUint64","key":"bG9jYWxTdGF0ZQ=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[559],"errorMessage":"Already voted"},{"pc":[438],"errorMessage":"Invalid end time"},{"pc":[549],"errorMessage":"Invalid option"},{"pc":[429],"errorMessage":"Number of options should be between 2 and 4"},{"pc":[242],"errorMessage":"OnCompletion must be NoOp"},{"pc":[285],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[275],"errorMessage":"OnCompletion must be OptIn && can only call when not creating"},{"pc":[414],"errorMessage":"Vote already created"},{"pc":[524],"errorMessage":"Voting has ended"},{"pc":[533],"errorMessage":"Voting has not started"},{"pc":[522],"errorMessage":"check self.endsAt exists"},{"pc":[541],"errorMessage":"check self.noOfOptions exists"},{"pc":[623],"errorMessage":"check self.option1Votes exists"},{"pc":[611],"errorMessage":"check self.option2Votes exists"},{"pc":[599],"errorMessage":"check self.option3Votes exists"},{"pc":[587],"errorMessage":"check self.option4Votes exists"},{"pc":[531],"errorMessage":"check self.startsAt exists"},{"pc":[412],"errorMessage":"check self.vote_status exists"},{"pc":[293,309,335,352,369,386],"errorMessage":"invalid array length header"},{"pc":[300,316,342,359,376,393],"errorMessage":"invalid number of bytes for arc4.dynamic_array<arc4.uint8>"},{"pc":[327,405,513],"errorMessage":"invalid number of bytes for arc4.uint64"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAECCCYQAAxvcHRpb24xVm90ZXMMb3B0aW9uMlZvdGVzDG9wdGlvbjNWb3RlcwxvcHRpb240Vm90ZXMLbm9PZk9wdGlvbnMIc3RhcnRzQXQGZW5kc0F0C3ZvdGVfc3RhdHVzBXRpdGxlC2Rlc2NyaXB0aW9uB29wdGlvbjEHb3B0aW9uMgdvcHRpb24zB29wdGlvbjQKbG9jYWxTdGF0ZTEYQAA1JwkoZycKKGcnBSJnJwsoZycMKGcnDShnJw4oZykiZyoiZysiZycEImcnBiJnJwciZycIImcxG0EANIAEMMbVijYaAI4BAB0xGRREMRhEggIEKRa26QQx1cMANhoAjgIAFQDvADEZIxIxGBBEI0MxGRQxGBQQRCNDNhoBSSJZJAhLARUSRFcCADYaAkkiWSQISwEVEkRXAgA2GgNJFSUSRBdJNhoESSJZJAhLARUSRFcCAEw2GgVJIlkkCEsBFRJEVwIATDYaBkkiWSQISwEVEkRXAgBMNhoHSSJZJAhLARUSRFcCAEw2GghJFSUSRBdMIicIZUQURCQPQQBSSwWBBA5BAEojRDIHSwFJTgIMRCcJSwlnJwpLCGcnBUsHZycLSwZnJwxLBWcnDUsEZycOSwNnKSJnKiJnKyJnJwQiZycGMgdnJwdMZycII2cjQyJC/7M2GgFJFSUSRBdJMgciJwdlRAxEMgciJwZlRA1EQQBfIicFZURLAQ9BAFQjRDEAIicPY0UBFEQxACcPSwJJTgNmjQUAAAAmABoADgABACInBGVEIwgnBExnI0MiK2VEIwgrTGdC//IiKmVEIwgqTGdC/+YiKWVEIwgpTGdC/9oiQv+p","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":4,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Voting contract
 */
export type VotingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_vote(string,string,uint64,string,string,string,string,uint64)void': {
      title: string
      description: string
      noOfOptions: bigint | number
      option1: string
      option2: string
      option3: string
      option4: string
      endsAt: bigint | number
    }
    'vote(uint64)void': {
      option: bigint | number
    }
    'opt_in()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_vote(string,string,uint64,string,string,string,string,uint64)void': [title: string, description: string, noOfOptions: bigint | number, option1: string, option2: string, option3: string, option4: string, endsAt: bigint | number]
    'vote(uint64)void': [option: bigint | number]
    'opt_in()void': []
  }
}

/**
 * The return type for each method
 */
export type VotingReturns = {
  'create_vote(string,string,uint64,string,string,string,string,uint64)void': void
  'vote(uint64)void': void
  'opt_in()void': void
}

/**
 * Defines the types of available calls and state of the Voting smart contract.
 */
export type VotingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_vote(string,string,uint64,string,string,string,string,uint64)void' | 'create_vote', {
      argsObj: VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void']
      argsTuple: VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']
      returns: VotingReturns['create_vote(string,string,uint64,string,string,string,string,uint64)void']
    }>
    & Record<'vote(uint64)void' | 'vote', {
      argsObj: VotingArgs['obj']['vote(uint64)void']
      argsTuple: VotingArgs['tuple']['vote(uint64)void']
      returns: VotingReturns['vote(uint64)void']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: VotingArgs['obj']['opt_in()void']
      argsTuple: VotingArgs['tuple']['opt_in()void']
      returns: VotingReturns['opt_in()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        title: string
        description: string
        noOfOptions: bigint
        option1: string
        option2: string
        option3: string
        option4: string
        option1Votes: bigint
        option2Votes: bigint
        option3Votes: bigint
        option4Votes: bigint
        startsAt: bigint
        endsAt: bigint
        voteStatus: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        localState: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VotingSignatures = keyof VotingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VotingNonVoidMethodSignatures = keyof VotingTypes['methods'] extends infer T ? T extends keyof VotingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Voting smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VotingSignatures> = VotingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Voting smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingSignatures> = VotingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VotingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = VotingTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VotingCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type VotingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VotingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Voting smart contract
 */
export abstract class VotingParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the Voting smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_vote(string,string,uint64,string,string,string,string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createVote(params: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_vote(string,string,uint64,string,string,string,string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.description, params.args.noOfOptions, params.args.option1, params.args.option2, params.args.option3, params.args.option4, params.args.endsAt],
    }
  }
  /**
   * Constructs a no op call for the vote(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.option],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Voting smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VotingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VotingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VotingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VotingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Voting smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VotingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new VotingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Voting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new VotingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Voting smart contract
 */
export class VotingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VotingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Voting app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VotingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VotingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VotingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VotingClient> {
    return new VotingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VotingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VotingClient> {
    return new VotingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Voting smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(VotingParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Voting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Voting smart contract using the `create_vote(string,string,uint64,string,string,string,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createVote: (params: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingParamsFactory.createVote(params))
    },

    /**
     * Makes a call to the Voting smart contract using the `vote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingParamsFactory.vote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Voting smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(VotingParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Voting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Voting smart contract using the `create_vote(string,string,uint64,string,string,string,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createVote: (params: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingParamsFactory.createVote(params))
    },

    /**
     * Makes a call to the Voting smart contract using the `vote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingParamsFactory.vote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Voting smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(VotingParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | VotingReturns['opt_in()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Voting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Voting smart contract using the `create_vote(string,string,uint64,string,string,string,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createVote: async (params: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingParamsFactory.createVote(params))
      return {...result, return: result.return as unknown as (undefined | VotingReturns['create_vote(string,string,uint64,string,string,string,string,uint64)void'])}
    },

    /**
     * Makes a call to the Voting smart contract using the `vote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | VotingReturns['vote(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VotingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Voting app
   */
  state = {
    /**
     * Methods to access global state for the current Voting app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          title: result.title,
          description: result.description,
          noOfOptions: result.noOfOptions,
          option1: result.option1,
          option2: result.option2,
          option3: result.option3,
          option4: result.option4,
          option1Votes: result.option1Votes,
          option2Votes: result.option2Votes,
          option3Votes: result.option3Votes,
          option4Votes: result.option4Votes,
          startsAt: result.startsAt,
          endsAt: result.endsAt,
          voteStatus: result.vote_status,
        }
      },
      /**
       * Get the current value of the title key in global state
       */
      title: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("title")) as string | undefined },
      /**
       * Get the current value of the description key in global state
       */
      description: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("description")) as string | undefined },
      /**
       * Get the current value of the noOfOptions key in global state
       */
      noOfOptions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("noOfOptions")) as bigint | undefined },
      /**
       * Get the current value of the option1 key in global state
       */
      option1: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("option1")) as string | undefined },
      /**
       * Get the current value of the option2 key in global state
       */
      option2: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("option2")) as string | undefined },
      /**
       * Get the current value of the option3 key in global state
       */
      option3: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("option3")) as string | undefined },
      /**
       * Get the current value of the option4 key in global state
       */
      option4: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("option4")) as string | undefined },
      /**
       * Get the current value of the option1Votes key in global state
       */
      option1Votes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("option1Votes")) as bigint | undefined },
      /**
       * Get the current value of the option2Votes key in global state
       */
      option2Votes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("option2Votes")) as bigint | undefined },
      /**
       * Get the current value of the option3Votes key in global state
       */
      option3Votes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("option3Votes")) as bigint | undefined },
      /**
       * Get the current value of the option4Votes key in global state
       */
      option4Votes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("option4Votes")) as bigint | undefined },
      /**
       * Get the current value of the startsAt key in global state
       */
      startsAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startsAt")) as bigint | undefined },
      /**
       * Get the current value of the endsAt key in global state
       */
      endsAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endsAt")) as bigint | undefined },
      /**
       * Get the current value of the vote_status key in global state
       */
      voteStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("vote_status")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current Voting app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localState: result.localState,
          }
        },
        /**
         * Get the current value of the localState key in local state
         */
        localState: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localState")) as bigint | undefined },
      }
    },
  }

  public newGroup(): VotingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_vote(string,string,uint64,string,string,string,string,uint64)void method call against the Voting contract
       */
      createVote(params: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote(uint64)void method call against the Voting contract
       */
      vote(params: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          optIn: (params: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Voting contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VotingComposer
  }
}
export type VotingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_vote(string,string,uint64,string,string,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createVote(params?: CallParams<VotingArgs['obj']['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | VotingArgs['tuple']['create_vote(string,string,uint64,string,string,string,string,uint64)void']>): VotingComposer<[...TReturns, VotingReturns['create_vote(string,string,uint64,string,string,string,string,uint64)void'] | undefined]>

  /**
   * Calls the vote(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<VotingArgs['obj']['vote(uint64)void'] | VotingArgs['tuple']['vote(uint64)void']>): VotingComposer<[...TReturns, VotingReturns['vote(uint64)void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Voting smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<VotingArgs['obj']['opt_in()void'] | VotingArgs['tuple']['opt_in()void']>): VotingComposer<[...TReturns, VotingReturns['opt_in()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Voting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VotingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VotingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VotingComposerResults<TReturns>>
}
export type VotingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

