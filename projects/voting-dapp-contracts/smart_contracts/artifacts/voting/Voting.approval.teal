#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock "" "option1Votes" "option2Votes" "option3Votes" "option4Votes" "noOfOptions" "startsAt" "endsAt" "vote_status" "title" "description" "option1" "option2" "option3" "option4" "localState"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/voting/contract.py:21
    // self.title = String("")
    bytec 9 // "title"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:22
    // self.description = String("")
    bytec 10 // "description"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:23
    // self.noOfOptions = UInt64(0)
    bytec 5 // "noOfOptions"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:24
    // self.option1 = String("")
    bytec 11 // "option1"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:25
    // self.option2 = String("")
    bytec 12 // "option2"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:26
    // self.option3 = String("")
    bytec 13 // "option3"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:27
    // self.option4 = String("")
    bytec 14 // "option4"
    bytec_0 // ""
    app_global_put
    // smart_contracts/voting/contract.py:28
    // self.option1Votes = UInt64(0)
    bytec_1 // "option1Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:29
    // self.option2Votes = UInt64(0)
    bytec_2 // "option2Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:30
    // self.option3Votes = UInt64(0)
    bytec_3 // "option3Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:31
    // self.option4Votes = UInt64(0)
    bytec 4 // "option4Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:32
    // self.startsAt = UInt64(0)
    bytec 6 // "startsAt"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:33
    // self.endsAt = UInt64(0)
    bytec 7 // "endsAt"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:34
    // self.vote_status = UInt64(0)
    bytec 8 // "vote_status"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/voting/contract.py:4
    // class Voting(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@13
    pushbytes 0x30c6d58a // method "opt_in()void"
    txna ApplicationArgs 0
    match main_opt_in_route@5
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x2916b6e9 0x31d5c300 // method "create_vote(string,string,uint64,string,string,string,string,uint64)void", method "vote(uint64)void"
    txna ApplicationArgs 0
    match create_vote vote
    err

main_opt_in_route@5:
    // smart_contracts/voting/contract.py:78
    // @abimethod(allow_actions=['OptIn'])
    txn OnCompletion
    intc_1 // OptIn
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be OptIn && can only call when not creating
    intc_1 // 1
    return

main___algopy_default_create@13:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// smart_contracts.voting.contract.Voting.create_vote[routing]() -> void:
create_vote:
    // smart_contracts/voting/contract.py:37
    // @abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 3
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    dup
    txna ApplicationArgs 4
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    swap
    txna ApplicationArgs 5
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    swap
    txna ApplicationArgs 6
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    swap
    txna ApplicationArgs 7
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    swap
    txna ApplicationArgs 8
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    swap
    // smart_contracts/voting/contract.py:39
    // assert self.vote_status == 0, "Vote already created"
    intc_0 // 0
    bytec 8 // "vote_status"
    app_global_get_ex
    assert // check self.vote_status exists
    !
    assert // Vote already created
    // smart_contracts/voting/contract.py:40
    // assert noOfOptions>=2 and noOfOptions<=4, "Number of options should be between 2 and 4"
    intc_2 // 2
    >=
    bz create_vote_bool_false@4
    dig 5
    pushint 4 // 4
    <=
    bz create_vote_bool_false@4
    intc_1 // 1

create_vote_bool_merge@5:
    // smart_contracts/voting/contract.py:40
    // assert noOfOptions>=2 and noOfOptions<=4, "Number of options should be between 2 and 4"
    assert // Number of options should be between 2 and 4
    // smart_contracts/voting/contract.py:41
    // assert Global.latest_timestamp < endsAt, "Invalid end time"
    global LatestTimestamp
    dig 1
    dup
    cover 2
    <
    assert // Invalid end time
    // smart_contracts/voting/contract.py:42
    // self.title = title
    bytec 9 // "title"
    dig 9
    app_global_put
    // smart_contracts/voting/contract.py:43
    // self.description = description
    bytec 10 // "description"
    dig 8
    app_global_put
    // smart_contracts/voting/contract.py:44
    // self.noOfOptions = noOfOptions
    bytec 5 // "noOfOptions"
    dig 7
    app_global_put
    // smart_contracts/voting/contract.py:45
    // self.option1 = option1
    bytec 11 // "option1"
    dig 6
    app_global_put
    // smart_contracts/voting/contract.py:46
    // self.option2 = option2
    bytec 12 // "option2"
    dig 5
    app_global_put
    // smart_contracts/voting/contract.py:47
    // self.option3 = option3
    bytec 13 // "option3"
    dig 4
    app_global_put
    // smart_contracts/voting/contract.py:48
    // self.option4 = option4
    bytec 14 // "option4"
    dig 3
    app_global_put
    // smart_contracts/voting/contract.py:49
    // self.option1Votes = UInt64(0)
    bytec_1 // "option1Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:50
    // self.option2Votes = UInt64(0)
    bytec_2 // "option2Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:51
    // self.option3Votes = UInt64(0)
    bytec_3 // "option3Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:52
    // self.option4Votes = UInt64(0)
    bytec 4 // "option4Votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/voting/contract.py:53
    // self.startsAt = Global.latest_timestamp
    bytec 6 // "startsAt"
    global LatestTimestamp
    app_global_put
    // smart_contracts/voting/contract.py:54
    // self.endsAt = endsAt
    bytec 7 // "endsAt"
    swap
    app_global_put
    // smart_contracts/voting/contract.py:55
    // self.vote_status = UInt64(1)
    bytec 8 // "vote_status"
    intc_1 // 1
    app_global_put
    // smart_contracts/voting/contract.py:37
    // @abimethod()
    intc_1 // 1
    return

create_vote_bool_false@4:
    intc_0 // 0
    b create_vote_bool_merge@5


// smart_contracts.voting.contract.Voting.vote[routing]() -> void:
vote:
    // smart_contracts/voting/contract.py:57
    // @abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    dup
    // smart_contracts/voting/contract.py:59
    // assert Global.latest_timestamp < self.endsAt, "Voting has ended"
    global LatestTimestamp
    intc_0 // 0
    bytec 7 // "endsAt"
    app_global_get_ex
    assert // check self.endsAt exists
    <
    assert // Voting has ended
    // smart_contracts/voting/contract.py:60
    // assert Global.latest_timestamp > self.startsAt, "Voting has not started"
    global LatestTimestamp
    intc_0 // 0
    bytec 6 // "startsAt"
    app_global_get_ex
    assert // check self.startsAt exists
    >
    assert // Voting has not started
    // smart_contracts/voting/contract.py:61
    // assert option>=1 and option<=self.noOfOptions, "Invalid option"
    bz vote_bool_false@4
    intc_0 // 0
    bytec 5 // "noOfOptions"
    app_global_get_ex
    assert // check self.noOfOptions exists
    dig 1
    >=
    bz vote_bool_false@4
    intc_1 // 1

vote_bool_merge@5:
    // smart_contracts/voting/contract.py:61
    // assert option>=1 and option<=self.noOfOptions, "Invalid option"
    assert // Invalid option
    // smart_contracts/voting/contract.py:63
    // val,exist = self.localState.maybe(Txn.sender)
    txn Sender
    intc_0 // 0
    bytec 15 // "localState"
    app_local_get_ex
    bury 1
    // smart_contracts/voting/contract.py:64
    // assert not exist, "Already voted"
    !
    assert // Already voted
    // smart_contracts/voting/contract.py:65
    // self.localState[Txn.sender] = option
    txn Sender
    bytec 15 // "localState"
    dig 2
    dup
    cover 3
    app_local_put
    // smart_contracts/voting/contract.py:66-76
    // match option:
    //     case 1:
    //         self.option1Votes += 1
    //     case 2:
    //         self.option2Votes += 1
    //     case 3:
    //         self.option3Votes += 1
    //     case 4:
    //         self.option4Votes += 1
    //     case _:
    //         op.exit(0)
    switch vote_switch_case_default@10 vote_switch_case_0@6 vote_switch_case_1@7 vote_switch_case_2@8 vote_switch_case_3@9

vote_switch_case_default@10:
    // smart_contracts/voting/contract.py:76
    // op.exit(0)
    err

vote_switch_case_3@9:
    // smart_contracts/voting/contract.py:74
    // self.option4Votes += 1
    intc_0 // 0
    bytec 4 // "option4Votes"
    app_global_get_ex
    assert // check self.option4Votes exists
    intc_1 // 1
    +
    bytec 4 // "option4Votes"
    swap
    app_global_put

vote_switch_case_next@11:
    // smart_contracts/voting/contract.py:57
    // @abimethod()
    intc_1 // 1
    return

vote_switch_case_2@8:
    // smart_contracts/voting/contract.py:72
    // self.option3Votes += 1
    intc_0 // 0
    bytec_3 // "option3Votes"
    app_global_get_ex
    assert // check self.option3Votes exists
    intc_1 // 1
    +
    bytec_3 // "option3Votes"
    swap
    app_global_put
    b vote_switch_case_next@11

vote_switch_case_1@7:
    // smart_contracts/voting/contract.py:70
    // self.option2Votes += 1
    intc_0 // 0
    bytec_2 // "option2Votes"
    app_global_get_ex
    assert // check self.option2Votes exists
    intc_1 // 1
    +
    bytec_2 // "option2Votes"
    swap
    app_global_put
    b vote_switch_case_next@11

vote_switch_case_0@6:
    // smart_contracts/voting/contract.py:68
    // self.option1Votes += 1
    intc_0 // 0
    bytec_1 // "option1Votes"
    app_global_get_ex
    assert // check self.option1Votes exists
    intc_1 // 1
    +
    bytec_1 // "option1Votes"
    swap
    app_global_put
    b vote_switch_case_next@11

vote_bool_false@4:
    intc_0 // 0
    b vote_bool_merge@5
